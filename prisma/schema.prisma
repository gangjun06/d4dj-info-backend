generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
}

model User {
  id            Int      @id @default(autoincrement())
  email         String   @unique
  name          String
  password      String
  isAdmin       Boolean  @default(false)
  emailVerified Boolean  @default(false)
  createdAt     DateTime @default(now())
}

model VerifyEmail {
  email    String   @unique
  code     String
  createAt DateTime @default(now())
}

model Resource {
  name       String   @unique
  lastUpdate DateTime @default(now())
}

model Unit {
  id                   Int         @id
  name                 String
  canTraining          Boolean
  summary              String
  mainColorCode        String
  subColorCode         String
  shortName            String
  initDeckCharacterIds Int[]
  characters           Character[]
  Music                Music[]
}

model Character {
  id               Int    @id
  fullName         String
  firstName        String
  firstNameEnglish String
  unitPrimaryKey   Int
  fullNameEnglish  String
  colorCode        String

  unit Unit   @relation(fields: [unitPrimaryKey], references: [id])
  card Card[]
}

enum Attribute {
  STREET
  PARTY
  CUTE
  COOL
  ELEGANT
}

model Skill {
  id                 Int    @id
  minRecoveryValue   Int
  maxRecoveryValue   Int
  comboSupportCount  Int
  scoreUpRate        Int
  minSeconds         Float
  maxSeconds         Float
  perfectScoreUpRate Int
  card               Card[]
}

model Card {
  id                        Int       @id
  rarity                    Int
  cardName                  String
  attribute                 Attribute
  characterPrimaryKey       Int
  skillParameterPrimaryKey  Int
  skillName                 String
  maxParameters             Int[]
  gachaMessage              String
  clothCardId               Int
  debutOrder                Int
  cardIllustHeadDistanceY   Float[]
  cardIllustCenterDistanceX Float[]
  startDate                 DateTime
  endDate                   DateTime

  character Character @relation(fields: [characterPrimaryKey], references: [id])
  skill     Skill     @relation(fields: [skillParameterPrimaryKey], references: [id])
}

enum MusicCategory {
  Instrumental
  Original
  Cover
  Game
  Collabo
}

model Music {
  id               Int           @id
  name             String
  readName         String
  lyrist           String
  composer         String
  arranger         String
  specialUnitName  String
  category         MusicCategory
  unitPrimaryKey   Int
  defaultOrder     Int
  musicBpm         Float
  openKey          Int
  sectionTrend     String
  startDate        String
  endDate          String
  hasMovie         Boolean
  // purchaseBonusesPrimaryKey any[]
  isHidden         Boolean
  excludeChallenge Boolean
  isTutorial       Boolean
  canFairUse       Boolean
  // static prismaSchema(data Music): Prisma

  unit     Unit       @relation(fields: [unitPrimaryKey], references: [id])
  chart    Chart[]
  musicMix MusicMix[]
}

enum ChartDifficulty {
  Easy
  Normal
  Hard
  Expert
}

model Chart {
  id                 Int             @id
  musicPrimaryKey    Int
  difficulty         ChartDifficulty
  level              Float
  achieveId          Int
  trends             Float[]
  overrideLevel      String
  designerPrimaryKey Int

  music         Music         @relation(fields: [musicPrimaryKey], references: [id])
  chartDesigner ChartDesigner @relation(fields: [designerPrimaryKey], references: [id])
}

model ChartDesigner {
  id    Int     @id
  name  String
  Chart Chart[]
}

enum MusicSection {
  Full
  Begin
  Middle
  End
  DJSimulator
}

model MusicMix {
  id                 Int          @id @default(autoincrement())
  musicPrimaryKey    Int
  section            MusicSection
  startTime          Float
  startTimeBpm       Float
  endTime            Float
  endTimeBpm         Float
  enableLongMixStart Boolean
  enableLongMixEnd   Boolean

  music Music @relation(fields: [musicPrimaryKey], references: [id])
}

model ChartNoteCount {
  id      Int          @id @default(autoincrement())
  chartId Int
  section MusicSection
  count   Int
}
