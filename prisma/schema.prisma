generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
}

model Resource {
  name       String   @unique
  lastUpdate DateTime @default(now())
}

model Unit {
  id                   Int           @id
  name                 String
  canTraining          Boolean
  summary              String
  mainColorCode        String
  subColorCode         String
  shortName            String
  initDeckCharacterIds Int[]
  characters           Character[]
  Music                Music[]
  UnitEpisode          UnitEpisode[]
}

model Character {
  id               Int    @id
  fullName         String
  firstName        String
  firstNameEnglish String
  unitPrimaryKey   Int
  fullNameEnglish  String
  colorCode        String

  unit         Unit           @relation(fields: [unitPrimaryKey], references: [id])
  card         Card[]
  Events       Event[]
  Live2DUIChat Live2DUIChat[]
}

enum Attribute {
  STREET
  PARTY
  CUTE
  COOL
  ELEGANT
}

model Skill {
  id                 Int    @id
  minRecoveryValue   Int
  maxRecoveryValue   Int
  comboSupportCount  Int
  scoreUpRate        Int
  minSeconds         Float
  maxSeconds         Float
  perfectScoreUpRate Int
  card               Card[]
}

model Card {
  id                        Int       @id
  rarity                    Int
  cardName                  String
  attribute                 Attribute
  characterPrimaryKey       Int
  skillParameterPrimaryKey  Int
  skillName                 String
  maxParameters             Int[]
  gachaMessage              String
  clothCardId               Int
  debutOrder                Int
  cardIllustHeadDistanceY   Float[]
  cardIllustCenterDistanceX Float[]
  startDate                 DateTime
  endDate                   DateTime

  character Character @relation(fields: [characterPrimaryKey], references: [id])
  skill     Skill     @relation(fields: [skillParameterPrimaryKey], references: [id])
  gacha     Gacha[]
}

enum MusicCategory {
  Instrumental
  Original
  Cover
  Game
  Collabo
}

model Music {
  id               Int           @id
  name             String
  readName         String
  lyrist           String
  composer         String
  arranger         String
  specialUnitName  String
  category         MusicCategory
  unitPrimaryKey   Int
  defaultOrder     Int
  musicBpm         Float
  openKey          Int
  sectionTrend     String
  startDate        DateTime
  endDate          DateTime
  hasMovie         Boolean
  // purchaseBonusesPrimaryKey any[]
  isHidden         Boolean
  excludeChallenge Boolean
  isTutorial       Boolean
  canFairUse       Boolean
  // static prismaSchema(data Music): Prisma

  unit     Unit       @relation(fields: [unitPrimaryKey], references: [id])
  chart    Chart[]
  musicMix MusicMix[]
  // EventMedleySetlistItem EventMedleySetlistItem[]
}

enum ChartDifficulty {
  Easy
  Normal
  Hard
  Expert
}

model Chart {
  id                 Int             @id
  musicPrimaryKey    Int
  difficulty         ChartDifficulty
  level              Float
  achieveId          Int
  trends             Float[]
  overrideLevel      String
  designerPrimaryKey Int
  noteCount          Int

  music         Music         @relation(fields: [musicPrimaryKey], references: [id])
  chartDesigner ChartDesigner @relation(fields: [designerPrimaryKey], references: [id])
}

model ChartDesigner {
  id    Int     @id
  name  String
  Chart Chart[]
}

enum MusicSection {
  Full
  Begin
  Middle
  End
  DJSimulator
}

model MusicMix {
  id                 Int          @id @default(autoincrement())
  musicPrimaryKey    Int
  section            MusicSection
  startTime          Float
  startTimeBpm       Float
  endTime            Float
  endTimeBpm         Float
  enableLongMixStart Boolean
  enableLongMixEnd   Boolean

  music Music @relation(fields: [musicPrimaryKey], references: [id])
}

model ChartNoteCount {
  id      Int          @id @default(autoincrement())
  chartId Int
  section MusicSection
  count   Int
}

enum EventType {
  Raid
  Slot
  Poker
  Medley
  Bingo
}

model Event {
  id                     Int       @id
  name                   String
  type                   EventType
  startDate              DateTime
  receptionCloseDate     DateTime
  rankFixStartDate       DateTime
  resultAnnouncementDate DateTime
  endDate                DateTime
  stockId                Int
  entryBonusStockAmount  Int
  stockAmountPerUse      Int
  storyUnlockDate        DateTime
  showExchangeButton     Boolean
  exchangeShopId         Int
  isD4FesStory           Boolean
  topPrefabPath          String
  showMissionButton      Boolean
  bgmpath                String
  episodeCharacters      Int[]

  // eventAggregation EventAggregation[]
  // stock            Stock              @relation(fields: [stockId], references: [id])
  // Stock Stock @relation(fields: [stockId], references: [id])
  episodeCharactersData Character[]
  EventEpisode          EventEpisode[]
}

// model EventAggregation {
//   id                Int    @id
//   eventPrimaryKey   Int
//   aggregationType   String
//   pointTypeName     String
//   pointTypeIconName String

//   event              Event                @relation(fields: [eventPrimaryKey], references: [id])
//   EventMedleySetlist EventMedleySetlist[]
// }

// model EventMedleySetlist {
//   id                                Int      @id @default(autoincrement())
//   aggregationPrimaryKey             Int      @unique
//   name                              String
//   musicIds                          Int[]
//   requiredPoint                     Int
//   startDate                         DateTime
//   endDate                           DateTime
//   order                             Int
//   specificBonusCharacterIds         Int[]
//   characterMatchParameterBonusId    Int
//   characterMatchParameterBonusValue Int

//   eventAggregationBase   EventAggregation         @relation(fields: [aggregationPrimaryKey], references: [id])
//   EventMedleySetlistItem EventMedleySetlistItem[]
// }

// model EventMedleySetlistItem {
//   id                   Int @id @default(autoincrement())
//   eventMedleySetlistId Int
//   musicId              Int

//   eventMedleySetlist EventMedleySetlist @relation(fields: [eventMedleySetlistId], references: [id])
//   music              Music              @relation(fields: [musicId], references: [id])
// }

enum StockCategory {
  Diamond
  Fragment
  Exp
  SkillExp
  LimitBreak
  VoltageRecovery
  Boost
  MusicShop
  Event
  GachaTicket
  Random
  ParameterLevelUp
  Other
}

model Stock {
  id                     Int           @id
  name                   String
  category               StockCategory
  viewCategoryPrimaryKey Int
  summary                String
  attributeId            Int
  rarity                 Int
  exp                    Int
  buffCharacterId        Int
  recoveryAmount         Int
  consumeAmount          Int
  maxAmount              Int
  startDate              DateTime
  endDate                DateTime
  isAppropriateSales     Boolean

  viewCategory StockViewCategory @relation(fields: [viewCategoryPrimaryKey], references: [id])
  // reward       Reward[]
  // Event        Event[]
}

enum RewardCategory {
  Stock
  Stamp
  Music
  Movie
  Honor
  ClubItem
  Card
}

model Reward {
  id       Int            @id
  category RewardCategory
  rewardId Int
  amount   Int

  // stock Stock @relation(fields: [rewardId], references: [id])
}

model StockViewCategory {
  id    Int     @id
  name  String
  Stock Stock[]
}

enum GachaCategory {
  Normal
  Event
  Birthday
  Revival
  StartDash
  Tutorial
}

enum GachaType {
  Normal
  StepUp
  Etc
}

model Gacha {
  id                               Int           @id
  name                             String
  tableRatesPrimaryKey             Int[]
  tableIds                         Int[]
  pickUpCardsPrimaryKey            Int[]
  summary                          String
  hasSpecificBg                    Boolean
  startDate                        DateTime
  endDate                          DateTime
  note                             String
  detail                           String
  live2dBg                         String[]
  loginTriggerMinutes              Int
  showHomeAnimation                Boolean
  hasPickUpDuplicateBonus          Boolean
  gachaCardAttribute               Int
  ascendingSortId                  Int
  category                         GachaCategory
  bonusStockId                     Int
  selectBonusMaxValue              Int
  selectBonusCardsPrimaryKey       Int[]
  selectBonusRewardsPrimaryKey     Int[]
  pickUpDuplicateBonusStockIds     Int[]
  pickUpDuplicateBonusStockAmounts Int[]
  type                             GachaType
  stepLoopCount                    Int

  pickUpCards Card[]
}

enum EpisodeCategory {
  Unit
  Event
  Card
  LiveResult
  Map
  Character
}

model Episode {
  id                   Int             @id
  category             EpisodeCategory
  conditionsPrimaryKey Int[]
  title                String
  summary              String
  rewardsPrimaryKey    Int[]
  startDate            DateTime
  endDate              DateTime
  hasVoice             Boolean
}

model UnitEpisode {
  id             Int @id
  backgroundId   Int
  season         Int
  unitPrimaryKey Int
  chapterNumber  Int

  unit Unit @relation(fields: [unitPrimaryKey], references: [id])
}

model EventEpisode {
  id              Int @id
  backgroundId    Int
  eventPrimaryKey Int
  chapterNumber   Int

  event Event @relation(fields: [eventPrimaryKey], references: [id])
}

model CharacterEpisode {
  id            Int @id
  backgroundId  Int
  characterId   Int
  chapterNumber Int
}

model LiveResultEpisode {
  id                   Int   @id
  charactersPrimaryKey Int[]
}

enum Live2DUIChatCategory {
  MenuCommon
  Training
  LoginBonus
  Mission
}

model Live2DUIChat {
  id                  Int                    @id
  categories          Live2DUIChatCategory[]
  characterPrimaryKey Int
  clothId             Int
  message             String
  motion              String
  startDate           DateTime
  endDate             DateTime
  character           Character              @relation(fields: [characterPrimaryKey], references: [id])
}
